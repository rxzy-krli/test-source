name: Forward Issue Comments to Another Repo with AI Summary

on:
  issue_comment:
    types: [created]
    if: github.event.issue.number == 1

jobs:
  forward-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Get comment details
        id: comment-details
        run: |
          echo "comment_body=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.issue.title }}" >> $GITHUB_OUTPUT
          echo "issue_url=${{ github.event.issue.html_url }}" >> $GITHUB_OUTPUT

      - name: Summarize comment and generate title using OpenAI
        id: ai-summary
        env:
          OPENAI_API_KEY: ${{ secrets.GLM_AI_TOKEN }}
        run: |
          COMMENT_BODY="${{ steps.comment-details.outputs.comment_body }}"

          # 转义评论内容中的特殊字符
          ESCAPED_COMMENT=$(echo "$COMMENT_BODY" | jq -R -s '.')
          
          # 使用 jq 构建 JSON payload
          PAYLOAD=$(jq -n \
            --arg model "glm-4-flash" \
            --arg system_content "你是一个专业的总结者，根据提供的文本总结核心内容并生成一个简洁的标题。输出格式为：标题: [标题内容]\n总结: [总结内容]" \
            --arg user_content "$COMMENT_BODY" \
            '{
              model: $model,
              messages: [
                {
                  role: "system",
                  content: $system_content
                },
                {
                  role: "user",
                  content: $user_content
                }
              ]
            }')
          
          # 打印请求负载以供调试
          echo "Debug - Payload:"
          echo "$PAYLOAD"
          
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            https://open.bigmodel.cn/api/paas/v4/chat/completions \
            -d "$PAYLOAD")
            
          # 打印原始响应以供调试
          echo "Debug - Raw Response:"
          echo "$RESPONSE"
          
          # 检查响应是否包含错误
          if echo "$RESPONSE" | jq -e '.error' > /dev/null; then
            echo "Error in API response:"
            echo "$RESPONSE" | jq '.error'
            exit 1
          fi
          
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          
          # 打印完整摘要以供调试
          echo "Debug - Full Summary:"
          echo "$SUMMARY"
          
          # 使用更可靠的方式提取标题和摘要
          TITLE=$(echo "$SUMMARY" | sed -n 's/^标题: *//p' | head -n 1)
          SUMMARY_CONTENT=$(echo "$SUMMARY" | sed -n 's/^总结: *//p' | head -n 1)
          
          # 打印提取的标题和摘要以供调试
          echo "Debug - Extracted Title: $TITLE"
          echo "Debug - Extracted Summary: $SUMMARY_CONTENT"
          
          # 确保变量不为空
          if [ -z "$TITLE" ] || [ -z "$SUMMARY_CONTENT" ]; then
            echo "Error: Failed to extract title or summary"
            exit 1
          fi
          
          # 将结果写入 GITHUB_OUTPUT
          {
            echo "ai_title<<EOF"
            echo "$TITLE"
            echo "EOF"
            echo "ai_summary<<EOF"
            echo "$SUMMARY_CONTENT"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create issue in target repo
        env:
          TARGET_REPO_OWNER: rxzy-krli
          TARGET_REPO_NAME: test-dst
          GITHUB_TOKEN: ${{ secrets.DST_ISSUE_TOKEN }}
        run: |
          ISSUE_URL="${{ steps.comment-details.outputs.issue_url }}"
          AI_TITLE="${{ steps.ai-summary.outputs.ai_title }}"
          AI_SUMMARY="${{ steps.ai-summary.outputs.ai_summary }}"
          COMMENT_BODY="${{ steps.comment-details.outputs.comment_body }}"

          NEW_ISSUE_TITLE="Comment Summary from ${{ github.repository }}: $AI_TITLE"
          NEW_ISSUE_BODY="Original issue: $ISSUE_URL\n\nAI Summary:\n$AI_SUMMARY\n\nOriginal Comment:\n$COMMENT_BODY"

          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$TARGET_REPO_OWNER/$TARGET_REPO_NAME/issues" \
            -d "{\"title\": \"$NEW_ISSUE_TITLE\", \"body\": \"$NEW_ISSUE_BODY\"}"
